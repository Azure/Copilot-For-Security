{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LogicAppName": {
            "type": "string"
        },
        "FunctionAppRG": {
            "type": "string"
        },
        "FunctionAppName": {
            "type": "string"
        },
        "PhishingReportEmailAddress": {
        "type": "string"
    }
},
    
    "variables": {
        "Office365-1ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-1ConnectionName": "[concat('Securitycopilot-1-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_(V3)": {
                            "splitOn": "@triggerBody()?['value']",
                            "type": "ApiConnectionNotification",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "fetch": {
                                    "pathTemplate": {
                                        "template": "/v3/Mail/OnNewEmail"
                                    },
                                    "method": "get",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "includeAttachments": true,
                                        "folderPath": "Inbox"
                                    }
                                },
                                "subscribe": {
                                    "body": {
                                        "NotificationUrl": "@{listCallbackUrl()}"
                                    },
                                    "pathTemplate": {
                                        "template": "/GraphMailSubscriptionPoke/$subscriptions"
                                    },
                                    "method": "post",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "folderPath": "Inbox"
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Check_if_attachments_exist": {
                            "actions": {
                                "Copilot_check_file_hashes": {
                                    "inputs": {
                                        "body": {
                                            "PromptContent": "\"\"",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillInputs": {
                                                "hash": "@{body('Process_JSON')?['email_content']?['attachments'][0]?['attachment_sha256']}"
                                            },
                                            "SkillName": "GetFileAnalysis"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/process-prompt"
                                    },
                                    "type": "ApiConnection"
                                }
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['email_content']?['attachments'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_variable_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Check_if_domains_exist": {
                            "actions": {
                                "Copilot_check_MDTI_for_domain_reputation": {
                                    "inputs": {
                                        "body": {
                                            "PromptContent": "Check the reputation for these domains @{body('Process_JSON')?['domains']}",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetReputationsForIndicators"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/process-prompt"
                                    },
                                    "type": "ApiConnection"
                                }
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['domains'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_variable_domains": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Export_email_(V2)": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value"
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                        },
                        "Finalize_and_score": {
                            "inputs": {
                                "body": {
                                    "PromptContent": "/AskGpt **Objective:**  Summarize the findings from this session and provide a confidence score to help determine if the submitted email is a phishing attempt.\n\n---\n\n### Email Subject:  @{body('Process_JSON')?['email_content']?['subject']}\n\n---\n\n### Investigation Summary\n\n#### 1. Attachment Review  \n- If attachments were found, summarize your findings here.  \n- Verify the legitimacy of the file sources, and ensure the attachment aligns with the intent of the email.\n\n#### 2. Email Body Analysis  \n- Summarize the intent of the email body in one sentence.  \n- List any phishing indicators, such as urgency, requests for personal information, or suspicious links.  \n- Analyze whether the overall tone or content suggests a phishing attempt. This is the most critical element of your analysis. \n\n#### 3. Domain Inspection  \n**Objective:**  \n- Verify if the email domain aligns with the content, subject, and intent of the message. Assess its legitimacy based on the reply-to and sender addresses:  \n   - Delivered to::   @{body('Process_JSON')?['email_content']?['smtp']?['delivered_to']}\n   - Return path:   @{body('Process_JSON')?['email_content']?['return_path']}\n- Check for any subtle spelling variations or differences from legitimate domains.\n   - Summarize the Microsoft Threat Intelligence Domain reputation scores. 'UNKNOWN' means there is no known threat intelligence on the domain. \n\n#### Domain-Subject Consistency  \n- Evaluate if the domain matches the subject of the email. For example, an email discussing an order from Amazon should come from @amazon.com or a closely related domain.\n\n#### Domain-Intent Consistency  \n- Assess if the domain matches the expected domain for the email’s claimed sender.  \n- Confirm if the domain fits the context and intent of the email (e.g., emails from a bank should use the official bank domain).  \n- Since no malicious domains or URLs were found, base your conclusions on other phishing indicators, especially the email body’s intent. If the intent seems suspicious or inconsistent, the likelihood of phishing increases.\n\n---\n",
                                    "SessionId": "@body('Summarize_Email_Intent')?['sessionId']"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/process-prompt"
                            },
                            "runAfter": {
                                "Check_if_domains_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "For_each_attachment": {
                            "actions": {
                                "Check_if_binary_msg_eml_attachment": {
                                    "actions": {
                                        "Decode_Base64_ContentBytes": {
                                            "inputs": "@base64ToBinary(items('For_each_attachment')?['contentBytes'])",
                                            "type": "Compose"
                                        },
                                        "Set_variable_raw_email_msg_binary_decoded": {
                                            "inputs": {
                                                "name": "raw_email",
                                                "value": "@outputs('Decode_Base64_ContentBytes')"
                                            },
                                            "runAfter": {
                                                "Decode_Base64_ContentBytes": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable"
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "application/vnd.ms-outlook"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "application/octet-stream"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "foreach": "@triggerBody()?['attachments']",
                            "runAfter": {
                                "Set_variable_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_attachments": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['email_content']?['attachments']"
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Summarize_Email_Intent": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Initialize_variable_domains": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['domains']"
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Check_if_attachments_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Initialize_variable_email_body": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@body('Process_JSON')?['email_content']?['body']"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Process_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Parse_Email": {
                            "inputs": {
                                "body": "@variables('raw_email')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            },
                            "runAfter": {
                                "For_each_attachment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function"
                        },
                        "Parse_JSON": {
                            "inputs": {
                                "content": "@body('Finalize_and_score')",
                                "schema": {
                                    "properties": {
                                        "evaluationResultContent": {
                                            "type": "string"
                                        },
                                        "evaluationResultType": {
                                            "type": "string"
                                        },
                                        "promptContent": {
                                            "type": "string"
                                        },
                                        "sessionId": {
                                            "type": "string"
                                        },
                                        "skillName": {
                                            "type": "string"
                                        },
                                        "skillSources": {
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "runAfter": {
                                "Finalize_and_score": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson"
                        },
                        "Process_JSON": {
                            "inputs": {
                                "content": "@body('Parse_Email')",
                                "schema": {
                                    "properties": {
                                        "domains": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "email_content": {
                                            "properties": {
                                                "attachments": {
                                                    "type": "array"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "dkim_result": {
                                                    "type": "string"
                                                },
                                                "dmarc_result": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "smtp": {
                                                    "properties": {
                                                        "delivered_to": {
                                                            "type": "string"
                                                        },
                                                        "received": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "spf_result": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ip_addresses": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "urls": {
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "runAfter": {
                                "Parse_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson"
                        },
                        "Send_an_email_(V2)": {
                            "inputs": {
                                "body": {
                                    "Attachments": [
                                        {
                                            "ContentBytes": "@base64(variables('raw_email'))",
                                            "Name": "@concat(body('Process_JSON')?['email_content']?['subject'], '.eml')"
                                        }
                                    ],
                                    "Body": "<div>@{replace(body('Parse_JSON')?['evaluationResultContent'], '\\n', '<br>')}</div>",
                                    "Importance": "Normal",
                                    "Subject": "Phishing Email Analysis",
                                    "To": "[parameters('PhishingReportEmailAddress')]"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/Mail"
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Set_variable_raw_email": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Summarize_Email_Intent": {
                            "inputs": {
                                "body": {
                                    "PromptContent": "/AskGpt Objective: In the following series of prompts you will assess data to determine if an email is a phishing email. First prompt objective: Analyze the body of this email for malicious intent and legitimacy \"@{variables('email_body')}\" Indicators to Look For (analyze the available data points): 1. Sense of Urgency: Phrases like 'Act Now,' 'Urgent Action Required,' or 'Immediate Response Needed.' 2. Generic Greetings: Greetings such as 'Dear Customer,' 'Dear User,' or 'Hello Friend.' 3. Spelling or Grammar Mistakes: Frequent misspellings, improper grammar, or awkward phrasing. 4. Requests for Personal Information: Asking for sensitive details like passwords, Social Security numbers, or banking information. 5. Too Good to Be True Offers: Promises of large sums of money, prizes, or gifts. 6. Emotional Manipulation: Attempts to create fear, anxiety, or excitement to provoke a response. 7. Monetary Incentives: Offers of money, gift cards, or rewards for taking action. 8. Surveys and Gift Cards: Surveys promising rewards or gift cards for participation. 9. Unusual Requests: Requests that seem out of context or abnormal for the sender. 10. Suspicious Links or Phone Numbers: Urging the user to click on a link or call a phone number, especially when combined with other indicators. 11. Random Words: Presence of random words that do not make sense, used to bypass email filters. 12. Attachments or Links: Check if the sender is trying to get the recipient to open an attachment or click on a link, especially if combined with other suspicious indicators. Evaluate the body of the email based on these criteria to determine its legitimacy and potential malicious intent."
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/process-prompt"
                            },
                            "runAfter": {
                                "Initialize_variable_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                                "connectionName": "[variables('Office365-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                            },
                            "securitycopilot-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('LogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        }
    ]
}
