{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LogicAppName": {
            "type": "string"
        },
        "FunctionAppRG": {
            "type": "string"
        },
        "FunctionAppName": {
            "type": "string"
        },
        "PhishingReportEmailAddress": {
        "type": "string"
    }
},
    
    "variables": {
        "Office365-1ConnectionName": "[concat('Office365-1-', parameters('LogicAppName'))]",
        "Securitycopilot-1ConnectionName": "[concat('Securitycopilot-1-', parameters('LogicAppName'))]",
        "FunctionName01": "parse_email"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_new_email_arrives_(V3)": {
                            "splitOn": "@triggerBody()?['value']",
                            "type": "ApiConnectionNotification",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "fetch": {
                                    "pathTemplate": {
                                        "template": "/v3/Mail/OnNewEmail"
                                    },
                                    "method": "get",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "includeAttachments": true,
                                        "folderPath": "Inbox"
                                    }
                                },
                                "subscribe": {
                                    "body": {
                                        "NotificationUrl": "@{listCallbackUrl()}"
                                    },
                                    "pathTemplate": {
                                        "template": "/GraphMailSubscriptionPoke/$subscriptions"
                                    },
                                    "method": "post",
                                    "queries": {
                                        "importance": "Any",
                                        "fetchOnlyWithAttachment": false,
                                        "folderPath": "Inbox"
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Check_if_attachments_exist": {
                            "actions": {
                                "Copilot_check_file_hashes": {
                                    "inputs": {
                                        "body": {
                                            "PromptContent": "\"\"",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillInputs": {
                                                "hash": "@{body('Process_JSON')?['email_content']?['attachments'][0]?['attachment_sha256']}"
                                            },
                                            "SkillName": "GetFileAnalysis"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/process-prompt"
                                    },
                                    "type": "ApiConnection"
                                }
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['email_content']?['attachments'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_variable_attachments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Check_if_domains_exist": {
                            "actions": {
                                "Copilot_check_MDTI_for_domain_reputation": {
                                    "inputs": {
                                        "body": {
                                            "PromptContent": "Check the reputation for these domains @{body('Process_JSON')?['domains']}",
                                            "SessionId": "@body('Summarize_Email_Intent')?['sessionId']",
                                            "SkillName": "GetReputationsForIndicators"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/process-prompt"
                                    },
                                    "type": "ApiConnection"
                                }
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Process_JSON')?['domains'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_variable_domains": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Export_email_(V2)": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value"
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                        },
                        "Finalize_and_score": {
                            "inputs": {
                                "body": {
                                    "PromptContent": "/AskGpt \n\n**Objective:**  \nGenerate an HTML formatted summary of the findings from this session to help determine if the submitted email is a phishing attempt. Defang all URLs in the summary.\n\n---\n\n<h2>Email Subject:</h2>  \n<p>@{body('Process_JSON')?['email_content']?['subject']}</p>\n\n<h2>Investigation Summary</h2>\n\n<h3>1. Attachment Review</h3>\n<ul>\n  <li><strong>Findings:</strong> If attachments were found, summarize your findings here, take the output from PerformOnDemandDetonation.</li>\n  <li><strong>Legitimacy Check:</strong> Verify the legitimacy of the file sources and ensure the attachment aligns with the intent of the email.</li>\n</ul>\n\n<h3>2. Email Body Analysis</h3>\n<ul>\n  <li><strong>Intent Summary:</strong> Summarize the intent of the email body in one sentence.</li>\n  <li><strong>Phishing Indicators:</strong> List any indicators of phishing, such as urgency, requests for personal information, or suspicious links.\n    <ul>\n      <li><strong>URL Evaluation:</strong> Scrutinize any hyperlinks within the email to determine if they lead to legitimate and secure sites. Check for URL shorteners, misleading domains, and redirections that could be indicative of phishing, in this secation use the ourput from PerformOnDemandDetonation skill and add the verdit into the output, include the images also in the reports</li>\n    </ul>\n  </li>\n  <li><strong>Overall Assessment:</strong> Analyze whether the overall tone or content suggests a phishing attempt. This is the most critical element of your analysis.</li>\n</ul>\n\n<h3>3. Domain Inspection</h3>\n<ul>\n  <li><strong>Objective:</strong> Verify if the email domain aligns with the content, subject, and intent of the message. Assess its legitimacy based on the reply-to and sender addresses:\n    <ul>\n      <li><strong>Delivered to:</strong>@{body('Process_JSON')?['email_content']?['smtp']?['delivered_to']}</li>\n      <li><strong>Return path:</strong>@{body('Process_JSON')?['email_content']?['return_path']}</li>\n </ul>\n  </li>\n  <li><strong>Domain Variations:</strong> Check for any subtle spelling variations or differences from legitimate domains.</li>\n  <li><strong>Threat Intelligence:</strong> Summarize the Microsoft Threat Intelligence Domain reputation scores. 'UNKNOWN' means there is no known threat intelligence on the domain.</li>\n</ul>\n\n<h3>Domain-Subject Consistency</h3>\n<ul>\n  <li><strong>Evaluation:</strong> Evaluate if the domain matches the subject of the email. For example, an email discussing an order from Amazon should come from @amazon.com or a closely related domain.</li>\n</ul>\n\n<h3>Domain-Intent Consistency</h3>\n<ul>\n  <li><strong>Domain Relevance:</strong> Assess if the domain matches the expected domain for the email’s claimed sender.</li>\n  <li><strong>Contextual Fit:</strong> Confirm if the domain fits the context and intent of the email (e.g., emails from a bank should use the official bank domain).</li>\n  <li><strong>URL Consistency:</strong> Ensure that any URLs within the email content are consistent with the sender's domain and do not redirect to unrelated or suspicious sites. Here is a list of the URLs found in the email: \n@{body('Process_JSON')?['urls']}</li>\n</ul>\n\n<h2>Final Evaluation</h2>\n<p>Based on the analysis from this session, you will select one of the following categories to classify the email:</p>\n<ul>\n  <li><strong>CERTAIN:</strong> The email has clear phishing characteristics, and you are certain it is phishing. If any domains are marked as something other than UNKNOWN it is likely a phishing email.</li>\n  <li><strong>SUSPICIOUS:</strong> The email shows some phishing signs, and you are suspicious of its intent.</li>\n  <li><strong>BENIGN:</strong> The email does not have enough phishing characteristics and can be safely ignored.</li>\n</ul>\n\n<h3>Reasoning:</h3>\n<p>Provide detailed evidence and rationale for the selected category.</p>\n\n",
                                    "SessionId": "@body('Summarize_Email_Intent')?['sessionId']"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/process-prompt"
                            },
                            "runAfter": {
                                "Check_if_domains_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "For_each_attachment": {
                            "actions": {
                                "Check_if_binary_msg_eml_attachment": {
                                    "actions": {
                                        "Decode_Base64_ContentBytes": {
                                            "inputs": "@base64ToBinary(items('For_each_attachment')?['contentBytes'])",
                                            "type": "Compose"
                                        },
                                        "Set_variable_raw_email_msg_binary_decoded": {
                                            "inputs": {
                                                "name": "raw_email",
                                                "value": "@outputs('Decode_Base64_ContentBytes')"
                                            },
                                            "runAfter": {
                                                "Decode_Base64_ContentBytes": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable"
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "application/vnd.ms-outlook"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "application/octet-stream"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@item()?['contentType']",
                                                    "message/rfc822"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "foreach": "@triggerBody()?['attachments']",
                            "runAfter": {
                                "Set_variable_raw_email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_attachments": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "attachments",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['email_content']?['attachments']"
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Summarize_Email_Intent": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Initialize_variable_domains": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains",
                                        "type": "array",
                                        "value": [
                                            "@body('Process_JSON')?['domains']"
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Check_if_attachments_exist": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Initialize_variable_email_body": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_body",
                                        "type": "string",
                                        "value": "@body('Process_JSON')?['email_content']?['body']"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Process_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Parse_Email": {
                            "inputs": {
                                "body": "@variables('raw_email')",
                                "function": {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', variables('FunctionName01'))]"
                                }
                            },
                            "runAfter": {
                                "For_each_attachment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Function"
                        },
                        "Parse_JSON": {
                            "inputs": {
                                "content": "@body('Finalize_and_score')",
                                "schema": {
                                    "properties": {
                                        "evaluationResultContent": {
                                            "type": "string"
                                        },
                                        "evaluationResultType": {
                                            "type": "string"
                                        },
                                        "promptContent": {
                                            "type": "string"
                                        },
                                        "sessionId": {
                                            "type": "string"
                                        },
                                        "skillName": {
                                            "type": "string"
                                        },
                                        "skillSources": {
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "runAfter": {
                                "Finalize_and_score": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson"
                        },
                        "Process_JSON": {
                            "inputs": {
                                "content": "@body('Parse_Email')",
                                "schema": {
                                    "properties": {
                                        "domains": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "email_content": {
                                            "properties": {
                                                "attachments": {
                                                    "type": "array"
                                                },
                                                "body": {
                                                    "type": "string"
                                                },
                                                "date": {
                                                    "type": "string"
                                                },
                                                "dkim_result": {
                                                    "type": "string"
                                                },
                                                "dmarc_result": {
                                                    "type": "string"
                                                },
                                                "receiver": {
                                                    "type": "string"
                                                },
                                                "reply_to": {
                                                    "type": "string"
                                                },
                                                "return_path": {
                                                    "type": "string"
                                                },
                                                "sender": {
                                                    "type": "string"
                                                },
                                                "smtp": {
                                                    "properties": {
                                                        "delivered_to": {
                                                            "type": "string"
                                                        },
                                                        "received": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "spf_result": {
                                                    "type": "string"
                                                },
                                                "subject": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ip_addresses": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "urls": {
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "runAfter": {
                                "Parse_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson"
                        },
                        "Send_an_email_(V2)": {
                            "inputs": {
                                "body": {
                                    "Attachments": [
                                        {
                                            "ContentBytes": "@base64(variables('raw_email'))",
                                            "Name": "@concat(body('Process_JSON')?['email_content']?['subject'], '.eml')"
                                        }
                                    ],
                                    "Body": "<div>@{replace(body('Parse_JSON')?['evaluationResultContent'], '\\n', '<br>')}</div>",
                                    "Importance": "Normal",
                                    "Subject": "Phishing Email Analysis",
                                    "To": "[parameters('PhishingReportEmailAddress')]"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/Mail"
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Set_variable_raw_email": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "raw_email",
                                        "type": "string",
                                        "value": "@{body('Export_email_(V2)')}"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Export_email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Summarize_Email_Intent": {
                            "inputs": {
                                "body": {
                                    "PromptContent": "/AskGpt Objective: In the following series of prompts you will assess data to determine if an email is a phishing email. First prompt objective: Analyze the body of this email for malicious intent and legitimacy \"@{variables('email_body')}\" Indicators to Look For (analyze the available data points): 1. Sense of Urgency: Phrases like 'Act Now,' 'Urgent Action Required,' or 'Immediate Response Needed.' 2. Generic Greetings: Greetings such as 'Dear Customer,' 'Dear User,' or 'Hello Friend.' 3. Spelling or Grammar Mistakes: Frequent misspellings, improper grammar, or awkward phrasing. 4. Requests for Personal Information: Asking for sensitive details like passwords, Social Security numbers, or banking information. 5. Too Good to Be True Offers: Promises of large sums of money, prizes, or gifts. 6. Emotional Manipulation: Attempts to create fear, anxiety, or excitement to provoke a response. 7. Monetary Incentives: Offers of money, gift cards, or rewards for taking action. 8. Surveys and Gift Cards: Surveys promising rewards or gift cards for participation. 9. Unusual Requests: Requests that seem out of context or abnormal for the sender. 10. Suspicious Links or Phone Numbers: Urging the user to click on a link or call a phone number, especially when combined with other indicators. 11. Random Words: Presence of random words that do not make sense, used to bypass email filters. 12. Attachments or Links: Check if the sender is trying to get the recipient to open an attachment or click on a link, especially if combined with other suspicious indicators. Evaluate the body of the email based on these criteria to determine its legitimacy and potential malicious intent."
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/process-prompt"
                            },
                            "runAfter": {
                                "Initialize_variable_email_body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                                "connectionName": "[variables('Office365-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                            },
                            "securitycopilot-1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]",
                                "connectionName": "[variables('Securitycopilot-1ConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('LogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Office365-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Office365-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('Securitycopilot-1ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('Securitycopilot-1ConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
                }
            }
        }
    ]
}
